name: Lint and test

env:
  BACKEND_IMAGE_NAME: nbe95/keinplan-backend
  FRONTEND_IMAGE_NAME: nbe95/keinplan-frontend

on:
  pull_request:
    types:
      - labeled
      - unlabeled
      - opened
      - reopened
      - synchronize
      - ready_for_review

jobs:
  validate-release:
    name: Validate pull request
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    outputs:
      sha: ${{ steps.commit.outputs.sha }}
      sha_short: ${{ steps.commit.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit data
        id: commit
        run: |
          echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short "${{ github.event.pull_request.head.sha }}")" >> $GITHUB_OUTPUT
      - uses: jefflinse/pr-semver-bump@v1.7.0
        name: Bump and tag new version
        with:
          mode: validate
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          major-label: major
          minor-label: minor
          patch-label: patch
          noop-labels: ""
          require-release-notes: false
          base-branch: true
          with-v: false

  lint-backend:
    name: Lint backend code
    runs-on: ubuntu-latest
    needs:
      - validate-release
    defaults:
      run:
        working-directory: ./backend/
    steps:
      - uses: actions/checkout@v4
      - name: Set up PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          pdm sync -d
      - name: Run linters
        run: |
          pdm run lint

  lint-frontend:
    name: Lint frontend code
    runs-on: ubuntu-latest
    needs:
      - validate-release
    defaults:
      run:
        working-directory: ./frontend/
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dev-dependencies
        run: |
          npm install --only=dev
      - name: Run linters
        run: |
          npm run lint
      - name: Perform type check
        run: |
          npx tsc

  lint-tests:
    name: Lint test code
    runs-on: ubuntu-latest
    needs:
      - validate-release
    defaults:
      run:
        working-directory: ./tests/
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dev-dependencies
        run: |
          npm install --only=dev
      - name: Run linters
        run: |
          npm run lint

  docker-image-backend:
    name: Build backend Docker image
    runs-on: ubuntu-latest
    needs:
      - validate-release
      - lint-backend
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          file: ./backend/Dockerfile
          context: ./backend/
          build-args: |
            VERSION=${{ needs.validate-release.outputs.sha_short }}-testing
            VERSION_SHA=${{ needs.validate-release.outputs.sha }}
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:testing

  docker-image-frontend:
    name: Build frontend Docker image
    runs-on: ubuntu-latest
    needs:
      - validate-release
      - lint-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          file: ./frontend/Dockerfile
          context: ./frontend/
          build-args: |
            VERSION=${{ needs.validate-release.outputs.sha_short }}-testing
            VERSION_SHA=${{ needs.validate-release.outputs.sha }}
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:testing

  deploy-testing:
    name: Deploy to testing
    runs-on: ubuntu-latest
    needs:
      - docker-image-backend
      - docker-image-frontend
    environment:
      name: testing
    steps:
      - name: Call webhook
        run: |
          curl -s -X POST "${{ secrets.DEPLOYMENT_WEBHOOK }}?DEPLOY_TAG=testing"
      - name: Wait for deployment to finish
        shell: bash
        run: |
          timeout 600 bash -c 'while [[ "$(curl -s "${{ vars.DEPLOYMENT_URL }}/api/v1/version")" != *"\"${{ needs.validate-release.outputs.sha }}\""* ]]; do sleep 10; done' || false

  test-e2e:
    name: Perform e2e tests
    runs-on: ubuntu-latest
    needs:
      - validate-release
      - deploy-testing
    environment:
      name: testing
    steps:
      - name: Set timezone required for tests
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/Berlin"
      - uses: actions/checkout@v4
      # Install npm dependencies, cache them correctly and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./tests/
        env:
          CYPRESS_BASE_URL: ${{ vars.DEPLOYMENT_URL }}
          CYPRESS_BACKEND_URL: ${{ vars.DEPLOYMENT_URL }}
          CYPRESS_TEST_VERSION: ${{ needs.validate-release.outputs.sha_short }}-testing
          CYPRESS_TEST_SHA: ${{ needs.validate-release.outputs.sha }}
